// const TelegramBot = require('node-telegram-bot-api');
// const debug = require('./debug')
// // replace the value below with the Telegram token you receive from @BotFather
// const token = '6359231028:AAHVbYT-HSx7sl3IcnFhcbS3Ef9C0dK1DCY';

// // Create a bot that uses 'polling' to fetch new updates
// const bot = new TelegramBot(token, {polling: true});
// console.log('telegram is working')
// // Matches "/echo [whatever]"
// // bot.onText(/\/echo (.+)/, (msg, match) => {
// //   // 'msg' is the received Message from Telegram
// //   // 'match' is the result of executing the regexp above on the text content
// //   // of the message

// //     const chatId = msg.chat.id;
// //   const resp = match[1]; // the captured "whatever"

// //   // send back the matched "whatever" to the chat
// //     bot.sendMessage(chatId, resp);
// // });

// // Listen for any kind of message. There are different kinds of
// // messages.
// bot.on('message', (msg) => {
//     const chatId = msg.chat.id;
// console.log(msg)
//   // send a message to the chat acknowledging receipt of their message
//     bot.sendMessage(chatId, `hey ,${msg.from.first_name}`)

// });
// bot.onText(/\/start/, (msg)=>{
//     const chatId = msg.chat.id;
//     bot.sendMessage(chatId, debug(msg))

// })
// bot.onText(/\/help (.+)/, (msg , [source , match ] )=>{  // ba3at help w gambha msg hatraga3 2 value fe array 
//                                                         // arr = [source , match ]
//     const chatId = msg.chat.id;
//     bot.sendMessage(chatId, debug(match))

// })
// bot.onText(/\/cours/ , msg  =>{
//     const html = `<strong> hello ${msg.from.last_name} </strong>
//     <i> course tody is : ${'axiso'} </i>
//     ${debug(msg)}`
//     const chatId = msg.chat.id;
//     bot.sendMessage(chatId ,html ,{
//         parse_mode:'HTML'
//     } )
// }
// )
//_____________________________________________
//  my
const TelegramBot = require('node-telegram-bot-api');
const debug = require('./debug')
// const btcValue = require('./getbitCoin');
const axios = require('axios');
const token = '6359231028:AAHVbYT-HSx7sl3IcnFhcbS3Ef9C0dK1DCY';
const bot = new TelegramBot(token, { polling: true });
const btcAddressPattern = /^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$/;
const userData = {};

// Define a function to start the form conversation
function startForm(chatId) {
    userData[chatId] = {};
    bot.sendMessage(chatId, `üóΩ DW - –æ–±–º–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
        üîÑ –ö—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        üîô –ö—ç—à–±–µ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫–∏.
        üëõ –õ–∏—á–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞.
        üí∏ –î–µ–Ω—å–≥–∏ –∑–∞ –æ—Ç–∑—ã–≤—ã –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.
        üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.
        üöÄ –ë—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ, –≤—ã–≥–æ–¥–Ω–æ.`);
        setTimeout(()=>{
            bot.sendMessage(chatId, 'Welcome! ')
            setTimeout(() => {
                        bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ ;):');
                    }, 1000);
        },1000)
        
    }
// Handle the "/start" command
    bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    startForm(chatId);
    });

    bot.onText(/\/cours/, (msg) => {
            const chatId = msg.chat.id;
            console.log(msg.text)
            const getBitcoinValueInRUB = async () => {
                try {
                    const response = await axios.
                    get('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=rub')
                    const bitcoinValueInRUB = response.data.bitcoin.rub;
                    // console.log('Bitcoin value in RUB:', bitcoinValueInRUB);
                    bot.sendMessage(chatId,`Bitcoin value in RUB:', ${bitcoinValueInRUB}`)
                    } catch (error) {
                    // console.error('Error:', error.message);
                    bot.sendMessage(chatId,`Error:', ${ error.message}`)
                    }
                };
                getBitcoinValueInRUB();
    });
    bot.onText(/\/help/, (msg) => {
                const chatId = msg.chat.id;
    //             const helpMessage = `
    // <strong>hey ,${msg.from.first_name}</strong>
    // <strong>our site:http://xxxxxxxxxxxxxxxxx </strong>
    // <strong>our chat:@xxxxxxxxxxxx</strong>
    // <strong>help er :,@xxxxxxxxxxxx</strong>
    //             `
    //             bot.sendMessage(chatId,helpMessage , {
    //                 parse_mode:'HTML'
    //             })
    bot.sendMessage(chatId , 'keyboard' , {
        reply_markup:{
            inline_keyboard:[
                [
                    {
                        text:'google',
                        url:"https://www.google.com"
                    },
                    {
                        text:'google',
                        url:"https://www.google.com"
                    }
                ],
                [
                    {
                        text:'Our site',
                        url:"https://www.google.com"
                    }
                ],
                [
                    {
                        text:'Our site',
                        url:"https://www.google.com"
                    }
                ],
                [
                    {
                        text:'paid ',
                        callback_data:"paid"
                    },
                    {
                        text:' cancel',
                        callback_data:"cancel"
                    }
                ]
            ]
    }
})
    });
    // Handle text messages to collect form data
    bot.on('text', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    if(text == '/start'){
        return
    }
    if(text == '/cours'){
        return
    }
    if(text == '/help'){
        return
    }
    if (!userData[chatId]) {
        startForm(chatId);
        return;
    }
    const keys = Object.keys(userData[chatId]);
    const currentStep = keys.length;
        axios.get('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=rub')
        .then(res =>{
            const btc =  res.data.bitcoin.rub;
            switch (currentStep) {
                //ask about name 
                case 0:
                userData[chatId].name = text;
                bot.sendMessage(chatId, '–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Bitcoin ? ');
                
                break;
                case 1:
                userData[chatId].btc = text;
                if( userData[chatId].btc > 1){
                    bot.sendMessage(chatId, `‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é —Å—É–º–º—É!\n
        (–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É: –æ—Ç 0.0001 –¥–æ 0.1 BTC) \n
–ù–æ –µ—Å–ª–∏ –í—ã –≤—Å–µ –∂–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏: 0.221 BTC, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: @xxxx. –°–¥–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä–æ.`);
                    
            setTimeout(() => {
                bot.sendMessage(chatId, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:  /start');
            }, 1000);
            delete userData[chatId];
                break;
                }
                else if(isNaN(userData[chatId].btc)){
                    bot.sendMessage(chatId, `‚ö†Ô∏è O—Ç–∫—Ä–æ–π –≥–ª–∞–∑–∞ –∏ –Ω–∞–ø–∏—à–∏ –¶–∏—Ñ—Ä—ã )`)
                    setTimeout(() => {
                        bot.sendMessage(chatId, ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ :  /start');
                    }, 1000);
                    delete userData[chatId];
                break;
                }else{
                    bot.sendMessage(chatId, '–ó–¥–æ—Ä–æ–≤–∞ ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –±–∏—Ç–∫–æ–π–Ω-–∫–æ—à–µ–ª–µ–∫');
                }
                break;
                case 2:
                userData[chatId].wallet = text;
                if (!btcAddressPattern.test( userData[chatId].wallet)){
                    bot.sendMessage(chatId, `‚ö†Ô∏è O—Ç–∫—Ä–æ–π –≥–ª–∞–∑–∞ –∏ –Ω–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ )`)
                    setTimeout(() => {
                        bot.sendMessage(chatId, ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:  /start');
                    }, 1000);
                    delete userData[chatId];
                    break;
                }
//                 bot.sendMessage(chatId, 
//                     // 'Form data collected successfully:\n' +
//                     // `Name: ${userData[chatId].name } \n` +
//                     // `Rub: ${(userData[chatId].email * res.data.bitcoin.rub).toFixed(2)}rub \n` +
//                     // `btc wallet: ${userData[chatId].phone}`
// //                     `‚òëÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññb4dd06 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n
// // ‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã \n
// // üí± –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: ${userData[chatId].email} BTC \n
// // üìÆ Bitcoin-–∫–æ—à–µ–ª—ë–∫:${userData[chatId].phone}\n
// // üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${(userData[chatId].email * res.data.bitcoin.rub).toFixed(2)}‚ÇΩ\n
// // üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: 4006 8011 0217 1961 \n
// // ‚ö†Ô∏è –ï—Å–ª–∏ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É, \n 
// //     —Ç–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç  —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–π.
// //     —Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª –ü–æ–º–æ—â—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é,
// //     \n —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç`
//                     );
                    bot.sendMessage(chatId , 
        `‚òëÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññb4dd06 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n
    ‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã \n
    üí± –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: ${userData[chatId].btc} BTC \n
    üìÆ Bitcoin-–∫–æ—à–µ–ª—ë–∫:
    ${userData[chatId].wallet}\n
    üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${(userData[chatId].btc * res.data.bitcoin.rub).toFixed(2)}‚ÇΩ\n
    üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:
    4006 8011 0217 1961 \n
    ‚ö†Ô∏è–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ –ª—é–±—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: QIWI, –ø–µ—Ä–µ–≤–æ–¥ —Å –∫–∞—Ä—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É,–Ω–∞–ª–∏—á–Ω—ã–µ (—Ç–µ—Ä–º–∏–Ω–∞–ª), –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏, –∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.\n
    ‚ÑπÔ∏è –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚úÖ–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª –∏–ª–∏ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞–∂–∞–≤–Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É¬ª\n
    ‚ö†Ô∏è –í–ê–ñ–ù–û! –ï—Å–ª–∏ –í—ã –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∑–∂–µ 23 –º–∏–Ω—É—Ç –∏ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É,—Ç–æ –º—ã –±—É–¥–µ–º –≤—ã–Ω—É–∂–¥–µ–Ω—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É!` 
    , {
            reply_markup:{
                inline_keyboard:[
                    [
                        {
                            text:'paid',
                            callback_data:"paid"
                        },
                        {
                            text:' cancel',
                            callback_data:"cancel"
                        }
                    ]
                ]
        }
    })

        console.log(userData[chatId])
        userData[chatId].rub = (userData[chatId].btc * res.data.bitcoin.rub).toFixed(2)
    break;
            }
        }).catch(error =>{
            console.log(error)
        })
    }
    );
console.log('Bot is running...,');

//callback inline keyboard 
bot.on('callback_query', query =>{
    let chatId = query.message.chat.id;
    if(query.data == 'cancel'){
        bot.sendMessage( chatId , query.data)
        delete userData[chatId]
        console.log(userData[chatId])
    }else{
        bot.sendMessage( chatId ,query.data)
        console.log(userData[chatId])
    }
})
    
// _____________________________________ ;'_____

// 3

// const TelegramBot = require('node-telegram-bot-api');

// // Replace 'YOUR_TOKEN' with your own Telegram bot token
// const token = '6359231028:AAHVbYT-HSx7sl3IcnFhcbS3Ef9C0dK1DCY';
// const bot = new TelegramBot(token, {polling: true});

// bot.onText(/\/start/, (msg) => {
//   const chatId = msg.chat.id;

//   bot.sendMessage(chatId, 'Welcome to the form! Please enter your name.');
// });

// bot.on('message', (msg) => {
//   const chatId = msg.chat.id;
//   const message = msg.text;

//   // State machine to handle the form
//   switch (message) {
//     case '/start':
//       break;
//     case 'cancel':
//       bot.sendMessage(chatId, 'Form canceled');
//       break;
//     case 'submit':
//       bot.sendMessage(chatId, 'Form submitted');
//       // Here, you can process the collected data
//       // For example, you can save the data to a database
//       break;
//     default:
//       // Store the previous message in the chat data object
//       const chatData = bot.getChat(chatId);
//       chatData.previousMessage = message;

//       // Ask for the next field
//       switch (chatData.previousMessage) {
//         case 'Welcome to the form! Please enter your name.':
//           bot.sendMessage(chatId, 'Please enter your email address.');
//           break;
//         case 'Please enter your email address.':
//           // Validate email address
//           if (!validateEmail(message)) {
//             bot.sendMessage(chatId, 'Invalid email address. Please enter a valid email address.');
//             return;
//           }
//           bot.sendMessage(chatId, 'Please enter your phone number.');
//           break;
//         case 'Please enter your phone number.':
//           // Validate phone number
//           if (!validatePhone(message)) {
//             bot.sendMessage(chatId, 'Invalid phone number. Please enter a valid phone number.');
//             return;
//           }

//           // Here, you can process the collected data
//           // For example, you can save the data to a database
//           bot.sendMessage(chatId, 'Thank you for submitting the form! You can type /start anytime to restart the form.');
//           break;
//       }
//       break;
//   }
// });

// // Helper function to validate email address
// function validateEmail(email) {
//   // Here, you can use your own email validation logic
//   return true; // Change this to your validation code
// }

// // Helper function to validate phone number
// function validatePhone(phone) {
//   // Here, you can use your own phone number validation logic
//   return true; // Change this to your validation code
// }